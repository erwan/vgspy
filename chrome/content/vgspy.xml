<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright Erwan Loisant 2008

   This file may be used under the terms of the
   GNU General Public License Version 2 or later (the "GPL"),
   http://www.gnu.org/licenses/gpl.html

   Software distributed under the License is distributed on an "AS IS" basis,
   WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
   for the specific language governing rights and limitations under the
   License.
-->
<bindings id="vgspy_bindings"
          xmlns="http://www.mozilla.org/xbl"
          xmlns:html="http://www.w3.org/1999/xhtml"
          xmlns:xul="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
          xmlns:xbl="http://www.mozilla.org/xbl">

  <binding id="price">
    <content>
      <xul:hbox flex="1">
        <xul:label xbl:inherits="value=label"
                   class="priceLink"
                   onclick="openURL(event);"
                   />
        <xul:spacer flex="1"/>
        <xul:label anonid="price" />
      </xul:hbox>
    </content>
    <implementation>
      <constructor>
        <![CDATA[
          this._price = document.getAnonymousElementByAttribute(this, "anonid", "price");
          if (this.price) {
            this._rawprice = this.price;
            this._price.setAttribute("value", this.formattedPrice);
          }
        ]]>
      </constructor>
      <property name="price">
        <getter>
          <![CDATA[
            return this._rawprice;
          ]]>
        </getter>
        <setter>
          <![CDATA[
            this._rawprice = val;
            this._price.setAttribute("value", this.formattedPrice);
          ]]>
        </setter>
      </property>
      <property name="formattedPrice" readonly="true">
        <getter>
          <![CDATA[
            return "$" + this._rawprice.toFixed(2);
          ]]>
        </getter>
      </property>

      <method name="openURL">
        <parameter name="aEvent"/>
        <body>
          <![CDATA[
            var url = this.getAttribute("href");
            var wm = Components.classes["@mozilla.org/appshell/window-mediator;1"]
                     .getService(Components.interfaces.nsIWindowMediator);
            var win = wm.getMostRecentWindow("navigator:browser");
            win.openUILinkIn(url, "tab");
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

  <binding id="pricebox">
    <content>
      <xul:vbox flex="1">
        <xul:label class="priceLabel"
                   anonid="priceLabel"
                   hidden="true"
                   xbl:inherits="value=title,tooltiptext=help" />
        <xul:vbox anonid="vgspyBox" class="vgPriceBox"/>
      </xul:vbox>
    </content>
    <implementation>
      <constructor>
        <![CDATA[
          this._box = document.getAnonymousElementByAttribute(this, "anonid", "vgspyBox");
          this._label = document.getAnonymousElementByAttribute(this, "anonid", "priceLabel");
          if (this.getAttribute("max")) {
            this._max = parseInt(this.getAttribute("max"), 10);
          }
        ]]>
      </constructor>
      <property name="max">
        <getter>
          <![CDATA[
            return this._max;
          ]]>
        </getter>
        <setter>
          <![CDATA[
            this._max = val;
            this.setAttribute("max", val);
          ]]>
        </setter>
      </property>
      <method name="addPrice">
        <parameter name="aLabel"/>
        <parameter name="aPrice"/>
        <parameter name="aURL"/>
        <body>
          <![CDATA[
            var prices = this._box.childNodes;
            var ref = null;
            for (var i = 0; i < prices.length && !ref; i++) {
              if (aPrice <= prices[i].price) {
                ref = prices[i];
              }
            }
            if (!ref && prices.length >= this._max) {
              return;
            }

            var price = document.createElement("price");
            price.setAttribute("label", aLabel);
            price.setAttribute("href", aURL);
            price.price = aPrice;

            if (ref) {
              this._box.insertBefore(price, ref);
            } else {
              this._box.appendChild(price);
            }
            this._label.setAttribute("hidden", false);
            while (this._box.childNodes.length > this._max) {
              this._box.removeChild(this._box.lastChild);
            }
          ]]>
        </body>
      </method>
      <method name="clear">
        <body>
          <![CDATA[
            this._label.setAttribute("hidden", true);
            while (this._box.firstChild) {
              this._box.removeChild(this._box.firstChild);
            }
          ]]>
        </body>
      </method>
    </implementation>
  </binding>

</bindings>
